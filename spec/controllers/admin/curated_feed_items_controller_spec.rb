require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe Admin::CuratedFeedItemsController do

  def mock_curated_feed_item(stubs={})
    @mock_curated_feed_item ||= mock_model(Admin::CuratedFeedItem, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all admin_curated_feed_items as @admin_curated_feed_items" do
      Admin::CuratedFeedItem.stub(:all) { [mock_curated_feed_item] }
      get :index
      assigns(:admin_curated_feed_items).should eq([mock_curated_feed_item])
    end
  end

  describe "GET show" do
    it "assigns the requested curated_feed_item as @curated_feed_item" do
      Admin::CuratedFeedItem.stub(:find).with("37") { mock_curated_feed_item }
      get :show, :id => "37"
      assigns(:curated_feed_item).should be(mock_curated_feed_item)
    end
  end

  describe "GET new" do
    it "assigns a new curated_feed_item as @curated_feed_item" do
      Admin::CuratedFeedItem.stub(:new) { mock_curated_feed_item }
      get :new
      assigns(:curated_feed_item).should be(mock_curated_feed_item)
    end
  end

  describe "GET edit" do
    it "assigns the requested curated_feed_item as @curated_feed_item" do
      Admin::CuratedFeedItem.stub(:find).with("37") { mock_curated_feed_item }
      get :edit, :id => "37"
      assigns(:curated_feed_item).should be(mock_curated_feed_item)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created curated_feed_item as @curated_feed_item" do
        Admin::CuratedFeedItem.stub(:new).with({'these' => 'params'}) { mock_curated_feed_item(:save => true) }
        post :create, :curated_feed_item => {'these' => 'params'}
        assigns(:curated_feed_item).should be(mock_curated_feed_item)
      end

      it "redirects to the created curated_feed_item" do
        Admin::CuratedFeedItem.stub(:new) { mock_curated_feed_item(:save => true) }
        post :create, :curated_feed_item => {}
        response.should redirect_to(admin_curated_feed_item_url(mock_curated_feed_item))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved curated_feed_item as @curated_feed_item" do
        Admin::CuratedFeedItem.stub(:new).with({'these' => 'params'}) { mock_curated_feed_item(:save => false) }
        post :create, :curated_feed_item => {'these' => 'params'}
        assigns(:curated_feed_item).should be(mock_curated_feed_item)
      end

      it "re-renders the 'new' template" do
        Admin::CuratedFeedItem.stub(:new) { mock_curated_feed_item(:save => false) }
        post :create, :curated_feed_item => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested curated_feed_item" do
        Admin::CuratedFeedItem.stub(:find).with("37") { mock_curated_feed_item }
        mock_admin_curated_feed_item.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :curated_feed_item => {'these' => 'params'}
      end

      it "assigns the requested curated_feed_item as @curated_feed_item" do
        Admin::CuratedFeedItem.stub(:find) { mock_curated_feed_item(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:curated_feed_item).should be(mock_curated_feed_item)
      end

      it "redirects to the curated_feed_item" do
        Admin::CuratedFeedItem.stub(:find) { mock_curated_feed_item(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(admin_curated_feed_item_url(mock_curated_feed_item))
      end
    end

    describe "with invalid params" do
      it "assigns the curated_feed_item as @curated_feed_item" do
        Admin::CuratedFeedItem.stub(:find) { mock_curated_feed_item(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:curated_feed_item).should be(mock_curated_feed_item)
      end

      it "re-renders the 'edit' template" do
        Admin::CuratedFeedItem.stub(:find) { mock_curated_feed_item(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested curated_feed_item" do
      Admin::CuratedFeedItem.stub(:find).with("37") { mock_curated_feed_item }
      mock_admin_curated_feed_item.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the admin_curated_feed_items list" do
      Admin::CuratedFeedItem.stub(:find) { mock_curated_feed_item }
      delete :destroy, :id => "1"
      response.should redirect_to(admin_curated_feed_items_url)
    end
  end

end
